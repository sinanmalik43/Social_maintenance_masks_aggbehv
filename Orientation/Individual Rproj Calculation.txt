import numpy as np
import matplotlib.pyplot as plt

# Data
turning_tendency_cntrl = []
turning_tendency_hgry = []

def tendency_to_angle(tendency):
    return (tendency + 1) * 180

def calculate_R(tendencies, scale_factor=5):
    return np.abs(tendencies) * scale_factor

def add_jitter(values, jitter_amount):
    return values + np.random.uniform(-jitter_amount, jitter_amount, len(values))

def mean_resultant_vector(angles, Rs):
    angles_rad = np.radians(angles)
    x_mean = np.mean(Rs * np.cos(angles_rad))
    y_mean = np.mean(Rs * np.sin(angles_rad))
    mean_vector_length = np.sqrt(x_mean**2 + y_mean**2)
    mean_vector_angle = np.degrees(np.arctan2(y_mean, x_mean)) % 360
    return mean_vector_length, mean_vector_angle

# Convert data
angles_cntrl = [tendency_to_angle(t) for t in turning_tendency_cntrl]
angles_hgry = [tendency_to_angle(t) for t in turning_tendency_hgry]
R_cntrl = calculate_R(turning_tendency_cntrl)
R_hgry = calculate_R(turning_tendency_hgry)

# Add jitter
jitter_amount_angle = 10
jitter_amount_R = 0.05
angles_cntrl_jittered = add_jitter(angles_cntrl, jitter_amount_angle)
angles_hgry_jittered = add_jitter(angles_hgry, jitter_amount_angle)
R_cntrl_jittered = np.clip(add_jitter(R_cntrl, jitter_amount_R), 0, 1)
R_hgry_jittered = np.clip(add_jitter(R_hgry, jitter_amount_R), 0, 1)

# Calculate Rproj for each individual point in both groups
Rproj_cntrl = -R_cntrl_jittered * np.cos(np.radians(angles_cntrl_jittered))
Rproj_hgry = -R_hgry_jittered * np.cos(np.radians(angles_hgry_jittered))

print("Individual Rproj values for Control group:", Rproj_cntrl)
print("Individual Rproj values for Hungry group:", Rproj_hgry)

# Calculate mean resultant vectors and mean resultant length Rr
mean_R_cntrl, mean_angle_cntrl = mean_resultant_vector(angles_cntrl_jittered, R_cntrl_jittered)
mean_R_hgry, mean_angle_hgry = mean_resultant_vector(angles_hgry_jittered, R_hgry_jittered)

print(f"Control Group Mean Resultant Vector: Length (Rr) = {mean_R_cntrl:.2f}, Angle = {mean_angle_cntrl:.2f} degrees")
print(f"Hungry Group Mean Resultant Vector: Length (Rr) = {mean_R_hgry:.2f}, Angle = {mean_angle_hgry:.2f} degrees")

# Create polar scatter plot
fig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(projection='polar'))

# Plot control group
ax.scatter(np.radians(angles_cntrl_jittered), R_cntrl_jittered, c='green', alpha=0.7, label='Control', s=50)
# Plot hungry group
ax.scatter(np.radians(angles_hgry_jittered), R_hgry_jittered, c='k', alpha=0.7, label='Hungry', s=50)

# Customize the plot
ax.set_theta_zero_location('E')
ax.set_theta_direction(-1)
ax.set_ylim(0, 1.2)

# Set invisible yticks to maintain gridlines
ax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])
ax.set_yticklabels([])  # Make the labels invisible

# Add vertical tick labels at 270 degrees
ytick_positions = [0.2, 0.4, 0.6, 0.8, 1.0]
for pos in ytick_positions:
    ax.text(np.radians(270), pos, f'{pos:.1f}', ha='right', va='center', rotation=0, color="grey", fontsize=10)

ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))

# Add gridlines and set inner circular line to dotted
ax.yaxis.grid(True, linestyle=':', linewidth=1)
ax.grid(True)

plt.tight_layout()
plt.show()
